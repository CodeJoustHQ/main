'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PropTypes = require('prop-types');
var react = require('react');
var useLatest = require('use-latest');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var useLatest__default = /*#__PURE__*/_interopDefaultLegacy(useLatest);

var useBeforeunload = function useBeforeunload(handler) {
  if (handler === void 0) {
    handler = function handler() {};
  }

  if (process.env.NODE_ENV !== 'production' && typeof handler !== 'function') {
    throw new TypeError("Expected \"handler\" to be a function, not " + typeof handler + ".");
  }

  var handlerRef = useLatest__default['default'](handler);
  react.useEffect(function () {
    var handleBeforeunload = function handleBeforeunload(event) {
      var returnValue = handlerRef.current(event); // Chrome requires `returnValue` to be set.

      if (event.defaultPrevented) {
        event.returnValue = '';
      }

      if (typeof returnValue === 'string') {
        event.returnValue = returnValue;
        return returnValue;
      }
    };

    window.addEventListener('beforeunload', handleBeforeunload);
    return function () {
      window.removeEventListener('beforeunload', handleBeforeunload);
    };
  }, []);
};

var Beforeunload = function Beforeunload(props) {
  useBeforeunload(props.onBeforeunload);
  return props.children;
};

Beforeunload.defaultProps = {
  children: null
};

if (process.env.NODE_ENV !== 'production') {
  Beforeunload.propTypes = {
    children: PropTypes__default['default'].any,
    onBeforeunload: PropTypes__default['default'].func.isRequired
  };
}

exports.Beforeunload = Beforeunload;
exports.useBeforeunload = useBeforeunload;
